---
title: "Making outlines with Blender"
date: 2023-02-02T11:27:39-08:00
tags: []
draft: true
---

If you want your renderings to look like hand drawings, the single most importent thing is outlines.
Even on realistic renderings, a small degree of outlining can improve clarity.

# Inverted Hull

Hull shading involves rendering a slightly larger version of the object, the hull, inside out, and in back.
Becuase the vertex order is inverted, only the parts of the hull *behind* the object are rendered.
This results in an outline around the edges of the object.

![An inverted hull on a light cube.](shaded_hull.png)

To do this in Blender, add a new material to the object, and set the color to the outline color (black for the example).
Then in material properties, make sure to enable backface culling for the newly added material.
To add the inverted hull, add the solidify modifier on the object, set the material offset (Materials -> material offset) on the modifyer to 1, and check Normals -> Flip on the modifier.
Finaly set the offset to 1 and thickness to 0.05m.

You can adjust the thickness parameter on the solidify modifier to change the thickness of the outline.
If you enable viewport shading you can see the effect of it in the viewport and while you are adjusting the thickness.

![An inverted hull on a unlight cube.](unshaded_hull.png)
One limititaion of the inverted hull method is that it only draws outlines behind objects, and not on edges infront of the object, meaning that it still requires shading.

# Edge detection Cel shading

Cel shading outlines all of an objects edges, makeing the geometry very visable, even without lighting.

![Some cel shaded objects, unlight](unshaded_cel.png)
Cel shading, applied on a unlight object.

![Some cel shaded objects, light](shaded_cel.png)
Cel shading and lighting with blender's Principled BSDF.

Another way to add outlines is to run a sobel filter on the depth and normal maps of the final rendered image, then use that to create the outlines.

To do this in Blender, first, open ``Scene -> Viewlayers`` in the sidebar, then enable the ``Z`` and ``Normal`` passes under ``Data -> Passes``.
This makes the renderer provide the neaded data for the outlines.
Then go into the compositing tab and check use nodes.

Create two ``Filter`` nodes, and connect the ``Depth`` and ``Normal`` render layers to the ``Image`` input and set the filter type to ``Sobel``.

![A render showing white outlines](cel_depth.png)
The result on running a Sobel filter on the depth pass.

Now pass the image output of the filters into the ``Image`` input of ``Blur`` nodes to smooth out the jagid edges, and incease the size parameter to ``5``.
Then combine the ``Image`` outputs of the ``Blur`` nodes with the ``Image`` inputs of a ``Alpha Over`` Node, and set the Alpha to ``0.5``.
Finaly, pass the ``Image`` output of that ``Alpha Over`` node into the ``Alpha`` input of another ``Alpha over`` node, passing the ``Image`` output of the ``Render layers`` node into the first ``Image`` input, and seting the second ``Image`` input to the color you want for the outlines. Pass the ``Image`` output into the ``Image`` input of the composite node and run a render to test it out.

You can adjust the ``Fac`` value on the Sobel filters to adjust where outlines are added.

![The finished nodetree, used to generate the example images](nodes.png)
